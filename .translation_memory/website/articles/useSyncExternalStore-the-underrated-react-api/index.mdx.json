{
  "source_file_path_relative_to_docusaurus_root": "articles/useSyncExternalStore-the-underrated-react-api/index.mdx",
  "source_file_content_hash": "d837303b04cde37a19a845d82af4186f11a8e3903e147c38fe77df1f4309161d",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nslug: useSyncExternalStore-the-underrated-react-api\ntitle: useSyncExternalStore - The underrated React API\nauthors: [slorber]\ndate: 2022-09-06\ntwitterThreadUrl: \"https://slo.im/t/articles/useSyncExternalStore\"\nimage: ./social-card.png\n---",
      "source_content_hash": "463e0b51872f1a5e3cc3474aefb0ec95b0298e06b01ad8226158676e1111d236",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "# useSyncExternalStore - The underrated React API",
      "source_content_hash": "a5dce1687748f70717491a0c8546283cfaf4e1eef3ad7bd5c0a650be567db168",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# useSyncExternalStore - 被低估的 React API"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "8d66f911",
      "source_content": "You might have heard of [`useSyncExternalStore()`](https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore), a new React 18 hook to **subscribe to external data sources**. It is often used internally by state management libraries - like [Redux](https://github.com/reduxjs/react-redux/pull/1808) - to implement a **selector system**.",
      "source_content_hash": "6dfb16c5d4df1e98625b528be600fd0ddea64f218dd284018831ea052ec868f4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可能聽過 [`useSyncExternalStore()`](https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore)，這是 React 18 的新鉤子，用於**訂閱外部資料來源**。它常被狀態管理函式庫（如 [Redux](https://github.com/reduxjs/react-redux/pull/1808)）內部使用，以實現**選擇器系統**。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "But what about using `useSyncExternalStore()` in your own application code?",
      "source_content_hash": "c9027d984edb43182ebed38711b5707efe426f4ebcffc1cc3b5baacd8b777e47",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "但在你自己的應用程式碼中使用 `useSyncExternalStore()` 又如何呢？"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "86b54d44",
      "source_content": "In this interactive article, I want to present you a problem: **over-returning React hooks triggering useless re-renders**. We will see how `useSyncExternalStore()` can be a good fix.",
      "source_content_hash": "0ecd869284da3cedc52e650276d0dbdf3809ccc73c7e99fc1388aa7252263aef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在這篇互動式文章中，我想提出一個問題：**過度回傳的 React 鉤子觸發了無用的重新渲染**。我們將探討 `useSyncExternalStore()` 如何成為一個好的解決方案。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "39b3772c",
      "source_content": "![social card](./social-card.png)",
      "source_content_hash": "ecaa1722784290579cd46f92c22c424f707d55b6dacecdbd0c594d8ca5d374b4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![社交卡片](./social-card.png)"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "c6da205d",
      "source_content": "<!-- truncate -->",
      "source_content_hash": "2f8566552e3b92233817e9029faa608a0a7bde771612eb57367d8dad692fdcb4",
      "node_type": "comment",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c6da205d"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5dfba1c3",
      "source_content": "<SubscribeFormEmbed />",
      "source_content_hash": "2b5c5e42f4352c90b9647a9da7a0fb7ece8b8dc27440e42cdf85cbb6e1901b85",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5dfba1c3"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "0adfe0aa",
      "source_content": "import {\n  App,\n  AppFixed,\n  ScrollApp,\n} from \"@site/articles/useSyncExternalStore-the-underrated-react-api/demos\";",
      "source_content_hash": "3c91cedb564c8960af28b0ddbdcdc983c8fd75bfeb3d8c3d93827f54b99c82f1",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_0adfe0aa"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "d06306f7",
      "source_content": "## Over-returning hooks",
      "source_content_hash": "ff7e4baf3d89595f00f50d75a8de1f3c357caecf5dca92ad12e68f16e92d287f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 過度回傳的鉤子"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "Let's illustrate the problem with [`useLocation()`](https://reactrouter.com/en/main/hooks/use-location) from React-Router.",
      "source_content_hash": "081f55901fe067af42824bc0d621da75bf7c93e50a0ff311b16a38afc2d61441",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "讓我們用 React-Router 的 [`useLocation()`](https://reactrouter.com/en/main/hooks/use-location) 來說明這個問題。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "This hook returns an object with many attributes (`pathname`, `hash`, `search`...), but you might not read all of them. Just calling the hook will trigger re-renders when any of these attributes is updated.",
      "source_content_hash": "98982ce1cf35f5fdd27a8076041d32c80cc73aee2181f01bf4199da3a95b0798",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這個鉤子回傳包含多個屬性（`pathname`、`hash`、`search`...）的物件，但你可能不會讀取全部屬性。僅僅調用該鉤子就會在任一屬性更新時觸發重新渲染。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "517051a7",
      "source_content": "Let's consider this app:",
      "source_content_hash": "03e7684b96fcdc3a5be6239120a717998a33a0fa9aef1e2dbac14b5510178f74",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "考慮以下應用程式："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "4dd51304",
      "source_content": "```tsx\nfunction CurrentPathname() {\n  const { pathname } = useLocation();\n  return <div>{pathname}</div>;\n}\n\nfunction CurrentHash() {\n  const { hash } = useLocation();\n  return <div>{hash}</div>;\n}\n\nfunction Links() {\n  return (\n    <div>\n      <Link to=\"#link1\">#link1</Link>\n      <Link to=\"#link2\">#link2</Link>\n      <Link to=\"#link3\">#link3</Link>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <CurrentPathname />\n      <CurrentHash />\n      <Links />\n    </div>\n  );\n}\n```",
      "source_content_hash": "68154e04385021e320c4366a29b2a63fe3fdfca2c8d2869ff9aa3e50fc837d5b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4dd51304"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "61a24b68",
      "source_content": "<App />",
      "source_content_hash": "020525fda7385f0f59c01976613d6828f508370400f3d4eb58b2aa56b1cf4fd0",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_61a24b68"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "147e8550",
      "source_content": "On any hash link click, the `CurrentPathname` component will re-render, even if it's not even using the `hash` attribute 😅.",
      "source_content_hash": "7619fee1f11b97c47972777ab65a4a716a1a837a03f3eef068629e2c3141b43f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "點擊任何雜湊連結時，`CurrentPathname` 元件都會重新渲染，即使它根本沒有使用 `hash` 屬性 😅。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "07837485",
      "source_content": ":::tip\n\nWhenever a hook returns data that you don't display, think about React re-renders. If you don't pay attention, a tiny `useLocation()` call added at the top of a React tree could harm your app's performance.\n\n:::",
      "source_content_hash": "33f6fa403e79ef3e5502ba8b4af605182fe6c08646b3dcb0baca0a6a8e7bb4a7",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::tip\n\n當一個鉤子回傳了你未顯示的資料時，請思考 React 重新渲染的問題。如果不注意，在 React 樹頂層添加的一個小小 `useLocation()` 調用就可能損害應用程式效能。\n\n:::"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "f5db8e60",
      "source_content": ":::info\n\nThe goal is not to criticize React-Router, but rather to illustrate the problem. `useLocation()` is just a good pragmatic candidate to create this interactive article. Your own React hooks and other third-party libraries might also over-return.\n\n:::",
      "source_content_hash": "d84feaa6ef7d17ddf2ff32c27022841748db9b5095b56c4792d8b843b00bd490",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n\n目標並非批評 React-Router，而是說明問題。`useLocation()` 只是創建這篇互動式文章的實用案例。你自己的 React 鉤子和其他第三方函式庫也可能過度回傳。\n\n:::"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "1c598ecd",
      "source_content": "## `useSyncExternalStore` to the rescue?",
      "source_content_hash": "400cf51319f48185cb1654c635f0786bb996bfbd4da99014c4dcfab57672e69b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## `useSyncExternalStore` 來救援？"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "The [official documentation](https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore) says:",
      "source_content_hash": "ffe360c34f7eaf872a0882b603075229fb5eb7525f52020e2ad92a93c8a08dae",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[官方文件](https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore)指出："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "30d027a1",
      "source_content": "> useSyncExternalStore is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing.\n> This method returns the value of the store and accepts three arguments:\n>\n> - `subscribe`: function to register a callback that is called whenever the store changes.\n> - `getSnapshot`: function that returns the current value of the store.\n> - `getServerSnapshot`: function that returns the snapshot used during server rendering.",
      "source_content_hash": "e1ed91fe55b63b3658af2c6d4c3129de8e917e3b1fb9ccf7471c8edbcf9e7c7b",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> useSyncExternalStore 是一個推薦用於讀取和訂閱外部資料來源的鉤子，其方式兼容並發渲染功能（如選擇性水合和時間切片）。\n> 此方法回傳儲存的值並接受三個參數：\n>\n> - `subscribe`：註冊回調函式的函式，當儲存變更時調用。\n> - `getSnapshot`：回傳當前儲存值的函式。\n> - `getServerSnapshot`：回傳伺服器渲染期間使用的快照的函式。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "ec99e704",
      "source_content": "```tsx\nfunction useSyncExternalStore<Snapshot>(\n  subscribe: (onStoreChange: () => void) => () => void,\n  getSnapshot: () => Snapshot,\n  getServerSnapshot?: () => Snapshot,\n): Snapshot;\n```",
      "source_content_hash": "37049ffb849ff33cab894cfeba415b68d66bfdeece444d5596cece028b53532b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ec99e704"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "2838eb68",
      "source_content": "This feels a bit abstract. This [beta doc page](https://beta.reactjs.org/learn/you-might-not-need-an-effect#subscribing-to-an-external-store) gives a good example:",
      "source_content_hash": "ca7536d7acd70832a20fcb4ee80bc28d5d800cb6f7e21083126da9b18926ed8f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這聽起來有些抽象。這篇[測試版文件頁面](https://beta.reactjs.org/learn/you-might-not-need-an-effect#subscribing-to-an-external-store)提供了很好的範例："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "de26f08a",
      "source_content": "```tsx\nfunction subscribe(callback) {\n  window.addEventListener(\"online\", callback);\n  window.addEventListener(\"offline\", callback);\n  return () => {\n    window.removeEventListener(\"online\", callback);\n    window.removeEventListener(\"offline\", callback);\n  };\n}\n\nfunction useOnlineStatus() {\n  return useSyncExternalStore(\n    subscribe,\n    () => navigator.onLine,\n    () => true,\n  );\n}\n\nfunction ChatIndicator() {\n  const isOnline = useOnlineStatus();\n  // ...\n}\n```",
      "source_content_hash": "9dbd0e80ea7b7d17e5c3341cf8de124068bd2080dd2c15c3e18b8602bee18bd4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_de26f08a"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "53aa2b95",
      "source_content": "It turns out that the browser history can also be considered as an external data source. Let's see how to use `useSyncExternalStore` with React-Router!",
      "source_content_hash": "ddb9900449da77cfb3672b7d96771bd9370737c14d5971b33dfc22e94cac2c5a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "事實上，瀏覽器歷史紀錄也可視為外部資料來源。讓我們看看如何搭配 React-Router 使用 `useSyncExternalStore`！"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "c766290e",
      "source_content": "## Implementing `useHistorySelector()`",
      "source_content_hash": "eafdc1d47619b50cf44fa76487aa0162ba785ed2de67d9a40997219f0d38d03b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 實作 `useHistorySelector()`"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5c7d994c",
      "source_content": "React-Router expose everything we need to wire `useSyncExternalStore`:",
      "source_content_hash": "05a88ff7a73ab9d40d3f883378482fa054421fab9e33d9a92f62f3e7249483ba",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React-Router 提供了我們連接 `useSyncExternalStore` 所需的一切："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "ecba4df2",
      "source_content": "- access the browser history with [`useHistory()`](https://v5.reactrouter.com/web/api/Hooks/usehistory)\n- subscribe for history updates with [`history.listen(callback)`](https://github.com/remix-run/history/blob/main/docs/api-reference.md#history.listen)\n- access a snapshot of the current location with [`history.location`](https://github.com/remix-run/history/blob/main/docs/api-reference.md#historylocation)",
      "source_content_hash": "3a69a5ea3aebb685d9674077043b8bdec06c90168706599b832b5bfc7da72cec",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 透過 [`useHistory()`](https://v5.reactrouter.com/web/api/Hooks/usehistory) 存取瀏覽器歷史紀錄\n- 透過 [`history.listen(callback)`](https://github.com/remix-run/history/blob/main/docs/api-reference.md#history.listen) 訂閱歷史紀錄更新\n- 透過 [`history.location`](https://github.com/remix-run/history/blob/main/docs/api-reference.md#historylocation) 存取當前位置的快照"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "51186659",
      "source_content": ":::caution\n\nThis website uses React-Router v5: the solution will be different for React-Router v6 ([see](https://twitter.com/Zh0uzi/status/1567523679604539405)).\n\n:::",
      "source_content_hash": "e165920d307b90a239c9a7cbe0a54abef4ab3ecfaf0d31a9863c9241712ee04a",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::caution\n\n本網站使用的是 React-Router v5：解決方案在 React-Router v6 中會有所不同（[詳見](https://twitter.com/Zh0uzi/status/1567523679604539405)）。\n\n:::"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "681ef526",
      "source_content": "The implementation of `useHistorySelector()` relatively simple:",
      "source_content_hash": "b35e0181ebd2bfc4c81f65c23a0f9d0f7f3463efbe7a7e26d901e55885c44146",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`useHistorySelector()` 的實作相對簡單："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "eb25bb8c",
      "source_content": "```tsx\nfunction useHistorySelector(selector) {\n  const history = useHistory();\n  return useSyncExternalStore(history.listen, () =>\n    selector(history),\n  );\n}\n```",
      "source_content_hash": "4148e4d5489e39f6a64e209787c2e0056a9c8017ca8cea0497fe8f570dc88715",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_eb25bb8c"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "44285072",
      "source_content": "Let's use it in our app:",
      "source_content_hash": "c5c2687980ae5832f77ef92f44860c31bcbc3f293e6aa0197c09ef526f9e4c84",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "讓我們在應用程式中使用它："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5680b15c",
      "source_content": "```tsx\nfunction CurrentPathname() {\n  const pathname = useHistorySelector(\n    (history) => history.location.pathname,\n  );\n  return <div>{pathname}</div>;\n}\n\nfunction CurrentHash() {\n  const hash = useHistorySelector(\n    (history) => history.location.hash,\n  );\n  return <div>{hash}</div>;\n}\n```",
      "source_content_hash": "8634c51e60804ee12e2db7021ea554920b0c5828f7c8517b94fc42126e367a79",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5680b15c"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "b905852a",
      "source_content": "<AppFixed />",
      "source_content_hash": "b52353ceb24bec063e10ce1dc5ecc46db4114eab4ab9dbca5589fef80f4b5f5b",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b905852a"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "dc72fd20",
      "source_content": "Now, when you click on a hash link above, the `CurrentPathname` component will **not re-render** anymore!",
      "source_content_hash": "52c5a811f7ee0105a3589cea54499ad70d2e14d33667189d4602b7a7b9675fed",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在，當你點擊上方的 hash 連結時，`CurrentPathname` 元件將**不再重新渲染**！"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "445c72bd",
      "source_content": "## Another example: `scrollY`",
      "source_content_hash": "7e9f3116e38ee27a6f6289a62d11a3a77c61b0c69e09a7dbdc270ba88582512b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 另一個例子：`scrollY`"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "9ef42155",
      "source_content": "There are so many external data sources that we can subscribe to, and implementing your own selector system on top might enable you to optimize React re-renders.",
      "source_content_hash": "f1e322ed225b706cfd909fd503f4859510dac8fd323b9987c3d60068ad1420bc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有許多外部資料來源可供訂閱，實作自己的選擇器系統可以幫助你優化 React 的重新渲染。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "fe25bd72",
      "source_content": "For example, let's consider we want to use the `scrollY` position of a page. We can implement this custom React hook:",
      "source_content_hash": "b6da6b19ff461c56fac08e138cdc6f75b410b530fc56e8645ce036bc9fcd25be",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，假設我們想要使用頁面的 `scrollY` 位置。我們可以實作這個自訂 React hook："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "65ba7468",
      "source_content": "```tsx\n// A memoized constant fn prevents unsubscribe/resubscribe\n// In practice it is not a big deal\nfunction subscribe(onStoreChange) {\n  global.window?.addEventListener(\"scroll\", onStoreChange);\n  return () =>\n    global.window?.removeEventListener(\n      \"scroll\",\n      onStoreChange,\n    );\n}\n\nfunction useScrollY(selector = (id) => id) {\n  return useSyncExternalStore(\n    subscribe,\n    () => selector(global.window?.scrollY),\n    () => undefined,\n  );\n}\n```",
      "source_content_hash": "3134d48752dbf7c9e77d0265a5ad9145df658c032aeda0d6c8257804603f28db",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_65ba7468"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "e6ac016e",
      "source_content": "We can now use this hook with an optional selector:",
      "source_content_hash": "5fe7994bac2ddf6c3169f35371c74ed5c013ea4d6a5f4689b259fc0b0c38717a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們現在可以使用這個 hook，並搭配一個可選的選擇器："
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "5b2e44c7",
      "source_content": "```tsx\nfunction ScrollY() {\n  const scrollY = useScrollY();\n  return <div>{scrollY}</div>;\n}\n\nfunction ScrollYFloored() {\n  const to = 100;\n  const scrollYFloored = useScrollY((y) =>\n    y ? Math.floor(y / to) * to : undefined,\n  );\n  return <div>{scrollYFloored}</div>;\n}\n```",
      "source_content_hash": "4d300d3a281610e30302fe8d59abb4edbd06478886eb3c15309eb614caf0beb1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5b2e44c7"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "70c65cb9",
      "source_content": "<ScrollApp />",
      "source_content_hash": "87e4dd8dae5f49eedd8ebe8eebe3f85246f0f5048d947e97cfcbac76dcc6f776",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_70c65cb9"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "61e5dad6",
      "source_content": "Scroll the page and see how the components above re-render? One is re-rendering less than the other!",
      "source_content_hash": "98e6dd5231b50293e3baae90be4411d8ba43083ef1e6c5a14a5b049dc5cf35ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "滾動頁面，看看上方元件如何重新渲染？其中一個元件的重新渲染次數比另一個少！"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "78bd731b",
      "source_content": ":::info\n\nWhen you don't need a `scrollY` 1 pixel precision level, returning a wide range value such as `scrollY` can also be considered as over-returning. Consider returning a narrower value.\n\nFor example: a `useResponsiveBreakpoint()` hook that only returns a limited set of values (`small`, `medium` or `large`) will be more optimized than a `useViewportWidth()` hook.\n\nIf a React component only handles `large` screens differently, you can create an even narrower `useIsLargeScreen()` hook returning a boolean.\n\n:::",
      "source_content_hash": "3838b8d80574d813aff3729df7de69e1712e98977d805d3271f0deef844a3ea6",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {},
      "invalid_translations": {
        "zh-hant": {
          "translation": ":::info\n\n當你不需要 `scrollY` 的 1 像素精確度時，回傳範圍過廣的值（如 `scrollY`）也可能被視為過度回傳。請考慮回傳更精確的值。\n\n例如：僅回傳有限值（`small`、`medium` 或 `large`）的 `useResponsiveBreakpoint()` hook，會比 `useViewportWidth()` hook 更優化。\n\n若 React 元件只需處理 `large` 螢幕的差異，可建立更精簡的 `useIsLargeScreen()` hook 來回傳布林值。\n\n:::",
          "reason": "Content of a non-translatable 'inlineCode' element was changed. Source: '`useResponsiveBreakpoint()`', Translation: '`small`'.",
          "timestamp": "2025-06-23T14:12:39.440338+00:00"
        }
      }
    },
    {
      "segment_id": "67dfd717",
      "source_content": "## Conclusion",
      "source_content_hash": "be031d37bb75d96ef08ca9ec5b0e83bb6f91172f60d3c31a78feae8d7dc4a0b0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 結論"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "ba12acea",
      "source_content": "I hope this article convinced you to take a second look at `useSyncExternalStore()`. I feel this hook is currently underused in the React ecosystem, and deserves a bit more attention. There are many external data sources that you can subscribe to.",
      "source_content_hash": "1355fc1bdf09826d3a4978436b82e8fe95c93e087e30878f49eff5d02f8ede88",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "希望本文能說服你重新審視 `useSyncExternalStore()`。我認為這個 hook 目前在 React 生態系中使用不足，值得更多關注，因為存在許多可訂閱的外部資料來源。"
      },
      "invalid_translations": {}
    },
    {
      "segment_id": "4033c370",
      "source_content": "If you still haven't upgraded to React 18, there's a npm [use-sync-external-store](https://www.npmjs.com/package/use-sync-external-store) shim that you can already use today in older versions. There is also a `use-sync-external-store/with-selector` export in case you need to return a memoized non-primitive value.",
      "source_content_hash": "b68310ecc785b49d09f5e05131808002c23cb580be2399153172b3f21d43a2e6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若尚未升級至 React 18，可使用 npm 的 [use-sync-external-store](https://www.npmjs.com/package/use-sync-external-store) 墊片套件支援舊版本。當需回傳記憶化的非原始值時，也可使用 `use-sync-external-store/with-selector` 匯出功能。"
      },
      "invalid_translations": {}
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog-articles/useSyncExternalStore-the-underrated-react-api/index.mdx",
  "last_updated_timestamp": "2025-06-23T14:12:39.440411+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "d837303b04cde37a19a845d82af4186f11a8e3903e147c38fe77df1f4309161d"
  }
}